@page "/jobs/{id:guid}"
@using ClivoxApp.Models.Invoice
@using ClivoxApp.Models.Clients

<MudPaper Class="pa-4 mb-4" Elevation="2" Style="display:flex;align-items:center;gap:16px;">
    @if (_clientIsCompany)
    {
        <MudIcon Icon="@Icons.Material.Filled.Business" Color="Color.Info" Size="Size.Large" />
    }
    else
    {
        <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Secondary" Size="Size.Large" />
    }
    <div>
        <MudText Typo="Typo.h6">@(_clientDisplayName ?? Resource.jobs_ClientLoading)</MudText>
        @if (!string.IsNullOrWhiteSpace(_clientEmail))
        {
            <MudText Typo="Typo.body2" Color="Color.Secondary">@_clientEmail</MudText>
        }
    </div>
</MudPaper>

<MudButton StartIcon="@Icons.Material.Filled.PostAdd" Color="Color.Primary" Variant="Variant.Filled" Class="mt-2 ml-4" OnClick="AddNewInvoice">
    @Resource.jobs_AddInvoice
</MudButton>

<MudGrid GutterSize="3" Class="mt-4">
    @if (invoices is not null)
    {
        @foreach (var invoice in invoices)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardContent Style="display: flex; align-items: center; gap: 12px;">
                        <MudImage Src="images/invoice.png" class="mr-5" Width="50" Height="50" />
                        <div style="display: flex; flex-direction: column;">
                            <MudText Typo="Typo.h6">@invoice.InvoiceNumber</MudText>
                            <MudText Typo="Typo.body2">@Resource.invoice_InvoiceDate: @invoice.InvoiceDate.Value.ToShortDateString()</MudText>
                            <MudText Typo="Typo.body2">@Resource.invoice_DueDate: @invoice.DueDate.Value.ToShortDateString()</MudText>
                            <MudText Typo="Typo.body2">@Resource.invoice_ServiceDate: @invoice.ServiceDate.Value.ToShortDateString()</MudText>
                            <MudText Typo="Typo.body2">@Resource.jobs_Total: @invoice.Items.Sum(x => x.Total).ToString("C")</MudText>
                            <MudText Typo="Typo.body2">@Resource.jobs_Items: @invoice.Items.Count</MudText>
                        </div>
                    </MudCardContent>
                    <MudCardActions Style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditInvoice(invoice))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteInvoice(invoice))" />
                        </div>
                        <MudIconButton Style="padding:0; border-radius:50%;" OnClick="@(() => ExportInvoice(invoice))">
                            <MudImage Src="images/xlsx.png" Width="30" Height="30" Alt="@Resource.jobs_ExportToExcel" />
                        </MudIconButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>

@inject ClivoxApp.Models.Invoice.InvoiceRepository InvoiceRepository
@inject MudBlazor.IDialogService DialogService
@inject ClientRepository ClientRepository

@code {
    [Parameter]
    public Guid Id { get; set; }

    private List<Invoice> invoices = new();
    private string? _clientDisplayName;
    private string? _clientEmail;
    private bool _clientIsCompany;

    protected override async Task OnInitializedAsync()
    {
        invoices = (await InvoiceRepository.GetInvoicesByClientIdAsync(Id)).ToList();
        var client = await ClientRepository.GetClientByIdAsync(Id);
        if (client is not null)
        {
            _clientDisplayName = client.IsCompany && !string.IsNullOrWhiteSpace(client.CompanyName)
                ? client.CompanyName
                : client.FullName;
            _clientEmail = client.Email;
            _clientIsCompany = client.IsCompany;
        }
        else
        {
            _clientDisplayName = Resource.jobs_ClientUnknown;
            _clientEmail = null;
            _clientIsCompany = false;
        }
    }

    private async Task AddNewInvoice()
    {
        var invoice = new Invoice();
        invoice.ClientId = Id;
        var parameters = new MudBlazor.DialogParameters { ["Invoice"] = invoice };
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<EditInvoiceDialog>(Resource.jobs_NewInvoice, parameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled)
            return;
        await InvoiceRepository.AddInvoiceAsync(invoice);
        invoices = (await InvoiceRepository.GetInvoicesByClientIdAsync(Id)).ToList();
    }

    private async Task EditInvoice(Invoice invoice)
    {
        var parameters = new MudBlazor.DialogParameters { ["Invoice"] = invoice };
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<EditInvoiceDialog>(Resource.jobs_EditInvoice, parameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled)
            return;
        await InvoiceRepository.UpdateInvoiceAsync(invoice);
        invoices = (await InvoiceRepository.GetInvoicesByClientIdAsync(Id)).ToList();
    }

    private async Task DeleteInvoice(Invoice invoice)
    {
        await InvoiceRepository.DeleteInvoiceAsync(invoice.Id);
        invoices = (await InvoiceRepository.GetInvoicesByClientIdAsync(Id)).ToList();
    }

    private async Task ExportInvoice(Invoice invoice)
    {
        await Task.CompletedTask;
    }
}